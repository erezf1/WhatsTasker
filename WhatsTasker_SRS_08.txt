# WhatsTasker: System Requirements Specification (SRS)

**Version:** 0.9.1\_twilio\_gcal\_status
**Document Version:** 1.0
**Date:** 2025-05-18

---

## 1. Introduction

### 1.1 Purpose

This document outlines the System Requirements Specification (SRS) for WhatsTasker, a personal productivity assistant accessed via WhatsApp. It details functional and non-functional requirements for version 0.9.1, focusing on an LLM-driven agent control flow, multi-language support, Twilio-based WhatsApp integration, and enhanced Google Calendar status monitoring.

### 1.2 Scope

WhatsTasker is designed as a Time Management Expert that helps users manage Tasks, ToDos, and Reminders through natural language on WhatsApp. It integrates with Google Calendar, uses a metadata store, and includes a Twilio bridge, improved GCal monitoring, and enhanced LLM decision-making.

### 1.3 Definitions, Acronyms, and Abbreviations

* **LLM:** Large Language Model
* **PRD:** Product Requirements Document
* **SRS:** System Requirements Specification
* **GCal:** Google Calendar
* **Item:** Generic term for Tasks, ToDos, or Reminders
* **Task:** Work item with a due date/time
* **ToDo:** Simple memory aid
* **Reminder:** Time-based alert
* **Working Session:** Calendar block for Task
* **UI:** User Interface
* **API:** Application Programming Interface

---

## 2. Overall Description

### 2.1 Product Perspective

WhatsTasker is a backend system that interacts with users via messaging platforms. It uses LLMs for conversation management, Google Calendar APIs for scheduling, and internal storage for data.

### 2.2 Product Features (v0.9.1)

1. **Multi-User Support** (via phone number)
2. **Multi-Bridge Interface:**

   * WhatsApp via `whatsapp-web.js`
   * WhatsApp via Twilio API
   * CLI for testing
3. **LLM-Driven Agent:**

   * Multilingual understanding and intent recognition
   * Proactive clarification and tool use
4. **Item Management:**

   * Creation, editing, filtering
   * Distinction between Task, ToDo, and Reminder
5. **Google Calendar Integration:**

   * Syncs timed Reminders and Working Sessions
   * Tracks GCal status: `not_integrated`, `pending_auth`, `connected`, `error`
6. **Smart Task Scheduling:**

   * Suggests calendar slots using duration and preferences
7. **User Preferences:**

   * Language, timezone, and work settings
8. **Automated Summaries:**

   * Morning and evening briefings
9. **Notifications:**

   * Pre-event alerts
10. **Fallback Mode:**

* Core task management without calendar

### 2.3 User Characteristics

Target users are individuals aiming to improve productivity using WhatsApp-based conversational tools.

### 2.4 Operating Environment

* Backend: Python
* Bridges: Node.js (web.js) and Python (Twilio)
* DB: SQLite
* Services: OpenAI, Google Calendar API, Twilio

### 2.5 Constraints

* Dependent on LLM and external APIs
* `whatsapp-web.js` instability
* Secure handling of user data (tokens, preferences)
* English and Hebrew support initially

---

## 3. System Features

### 3.1 Interface Layer

Supports interaction via WhatsApp (web.js and Twilio), CLI, with runtime-configurable active interface. User IDs normalized across bridges.

### 3.2 Routing Layer

Handles messages, determines user state, routes to onboarding or orchestrator agents, processes cheat/debug commands, supports internal events.

### 3.3 Agent Layer

Agents use full LLM control flow to:

* Parse intent
* Handle ambiguity
* Use tools
* Respond in preferred language
* Manage onboarding, item creation, scheduling, and routines

### 3.4 Tool Layer

Pydantic-validated functions for:

* Creating todos/reminders
* Scheduling tasks
* Updating preferences
* Booking calendar slots

### 3.5 Service Layer

Encapsulates logic for:

* Managing items and user config
* GCal sync
* Notification generation
* Summarization routines

### 3.6 Data Layer

* SQLite: Items, logs
* JSON: Preferences
* Encrypted storage: Tokens
* Enforced status values for GCal integration

### 3.7 Scheduler

Uses APScheduler for:

* Notifications
* Summaries
* Cleanup routines

### 3.8 Multi-Language Support

All user-facing communication is generated in the user's preferred language.

---

## 4. External Interface Requirements

### 4.1 User Interfaces

* WhatsApp via `whatsapp-web.js`
* WhatsApp via Twilio
* CLI

### 4.2 Hardware Interfaces

* Standard server environments

### 4.3 Software Interfaces

* OpenAI API
* Google Calendar API
* Twilio API

### 4.4 Communications Interfaces

* Node.js and Python communicate over FastAPI HTTP
* Webhooks and REST API used with Twilio
* All external communications via HTTPS

---

## 5. Non-Functional Requirements

### 5.1 Performance

* LLM replies: 5–10 sec
* Tool timeouts and optimization

### 5.2 Security

* Token encryption
* Secure storage of API keys
* HTTPS for all communications

### 5.3 Reliability

* Graceful failure handling
* GCal error tracking and recovery
* Twilio bridge as reliable fallback

### 5.4 Usability

* Intuitive conversation design
* Clear error messages in user language

### 5.5 Maintainability

* Modular architecture
* Typed code and documentation
* Externalized config

### 5.6 Portability

* Python: Linux/Docker
* Node.js: Required for `whatsapp-web.js`

---

## 6. Other Requirements

### Logging

System-wide logging of actions, messages, agent decisions, and errors is required and stored in `activity_db.py`.

---

**End of Document**
